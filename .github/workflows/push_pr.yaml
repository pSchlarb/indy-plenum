name: Indy Plenum - Push and PR Workflow
on:
  push:
    branches:
      # - master
      - ubuntu-20.04-upgrade

  pull_request:
    branches:
      # - master
       - ubuntu-20.04-upgrade
            
jobs:
  workflow-setup:
    name: Initialize Workflow
    runs-on: ubuntu-latest
    outputs:
      CACHE_KEY_BUILD: ${{ steps.cache.outputs.CACHE_KEY_BUILD }}
      UBUNTU_VERSION: ${{ steps.cache.outputs.UBUNTU_VERSION }}
      # Expose the lowercase version of the GitHub repository name
      # to all subsequent jobs that reference image repositories
      # as the push and pull operations require the URL of the repository
      # to be in lowercase.
      GITHUB_REPOSITORY_NAME: ${{ steps.repository-name.outputs.lowercase }}
      GITHUB_REF: ${{ steps.cache.outputs.GITHUB_REF }}
      distribution: ${{ steps.cache.outputs.distribution }}
      isDev: ${{ steps.build-flags.outputs.isDev }}
      isRC: ${{ steps.build-flags.outputs.isRC }}
      publish: ${{ steps.build-flags.outputs.publish }}
      version: ${{ steps.cache.outputs.version }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Convert the GitHub repository name to lowercase
        id: repository-name
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ github.repository }}

      - name: Set outputs
        id: cache
        run: |
          # Set variables according to version of ubuntu
          if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
            echo "::set-output name=CACHE_KEY_BUILD::${{ hashFiles('.github/workflows/build/Dockerfile.ubuntu-1604') }}"
            echo "::set-output name=UBUNTU_VERSION::ubuntu-1604"
            echo "::set-output name=distribution::xenial"
          fi
          if [[ "${{github.base_ref}}" == "ubuntu-20.04-upgrade" || "${{github.ref}}" == "refs/heads/ubuntu-20.04-upgrade" ]]; then
            echo "::set-output name=CACHE_KEY_BUILD::${{ hashFiles('.github/workflows/build/Dockerfile.ubuntu-2004') }}"
            echo "::set-output name=UBUNTU_VERSION::ubuntu-2004"
            echo "::set-output name=distribution::focal"
          fi

          if [[ "${{github.base_ref}}" == 'master' || "${{github.ref}}" == 'refs/heads/master' || "${{github.base_ref}}" == 'main' || "${{github.ref}}" == 'refs/heads/main' ]]; then
            echo "::set-output name=GITHUB_REF::main"
          elif [[ $(grep -oP "\[\d+.\d+.\d+rc\d+\]" <<< "${{github.event.pull_request.title}}") ]]; then
            echo "::set-output name=GITHUB_REF::rc"
            echo ::set-output\ name=version::$(grep -oP "\d+.\d+.\d+rc\d+" <<< "${{github.event.pull_request.title}}") 
          elif [[ "${{github.base_ref}}" == 'stable' || "${{github.ref}}" == 'refs/heads/stable' ]]; then
            echo "::set-output name=GITHUB_REF::stable"
          else
            echo "::set-output name=GITHUB_REF::dev"
          fi

      - name: Set build flags
        id: build-flags
        run: |

          if [[ "${{steps.cache.outputs.GITHUB_REF}}" == 'dev' || "${{steps.cache.outputs.GITHUB_REF}}" == 'main' ]]; then
            echo "::set-output name=isDev::true"
          else
            echo "::set-output name=isDev::false"
          fi

          if [[ "${{steps.cache.outputs.GITHUB_REF}}" == 'rc' ]]; then
            echo "::set-output name=isRC::true"
          else
            echo "::set-output name=isRC::false"
          fi

          # Ensure publishing is only performed when the build is executed from the main (hyperledger/indy-plenum) repository.
          if [[ ${{github.event.repository.full_name}} == 'hyperledger/indy-plenum' && ${{github.event_name}} == 'push' && ( ${{steps.cache.outputs.GITHUB_REF}} == 'main' || ${{steps.cache.outputs.GITHUB_REF}} == 'rc' || ${{steps.cache.outputs.GITHUB_REF}} == 'stable' || ${{steps.cache.outputs.GITHUB_REF}} == 'dev' ) ]]; then
            echo "::set-output name=publish::true"
          else
            echo "::set-output name=publish::false"
          fi

  lint:
    name: Lint
    needs: [workflow-setup]
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint
          restore-keys: |
            ${{ runner.os }}-pip-lint
      - name: Install flake8
        run: pip install flake8==3.8.4 pep8==1.7.1 pep8-naming==0.6.1
      - name: Lint with flake8
        run: python3 -m flake8 .

  build-docker-image:
    name: Create Builder Image
    needs: [workflow-setup, lint]
    uses: ./.github/workflows/buildimage.yaml
    with:
      CACHE_KEY_BUILD: ${{ needs.workflow-setup.outputs.CACHE_KEY_BUILD }}
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      UBUNTU_VERSION: ${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}

  bump_version:
    name: Bump Version Number
    needs: [workflow-setup, build-docker-image]
    if: needs.workflow-setup.outputs.isRC == 'true' && github.event_name == 'pull_request'
    runs-on: ubuntu-20.04
    env:
      UBUNTU_VERSION: ${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}
    container:
      image: ghcr.io/${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}/plenum-build:${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Prepare package and set version
        run: |
          ./build-scripts/${{ env.UBUNTU_VERSION }}/prepare-package.sh . plenum "${{ needs.workflow-setup.outputs.version }}" python-packages
          rm plenum/__manifest__.json

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update Version number to match specified 
          title: Update Version number
          body: Update Version number to match specified in PR Title
          branch: update-version
          base: ${{ github.head_ref }}

  plenum_tests:
    name: Test Plenum
    needs: [workflow-setup, lint, build-docker-image]
    uses: ./.github/workflows/test.yaml
    with:
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      UBUNTU_VERSION: ${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}

  build_packages:
    name: Build Packages
    needs: [workflow-setup, plenum_tests]
    uses: ./.github/workflows/buildpackages.yaml
    with:
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      UBUNTU_VERSION: ${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}
      isDev: ${{ needs.workflow-setup.outputs.isDev }}
      isRC: ${{ needs.workflow-setup.outputs.isRC }}

  publish_artifacts:
    name: Publish Artifacts
    needs: [workflow-setup, build_packages]
    if: needs.workflow-setup.outputs.publish == 'true'
    uses: ./.github/workflows/publish_artifacts.yaml
    with:
      GITHUB_REF: ${{ needs.workflow-setup.outputs.GITHUB_REF }}
      UBUNTU_VERSION: ${{ needs.workflow-setup.outputs.UBUNTU_VERSION }}
      distribution: ${{ needs.workflow-setup.outputs.distribution }}
    secrets:
      INDY_ARTIFACTORY_REPO_CONFIG: ${{ secrets.INDY_ARTIFACTORY_REPO_CONFIG }}
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}